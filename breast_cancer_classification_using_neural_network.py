# -*- coding: utf-8 -*-
"""Breast cancer classification using neural network.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qJPm_d4iwYzDg8sYvaKv0GaVq1jwkC8r
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn.datasets

from sklearn.model_selection import train_test_split

breast_cancer_dataset=sklearn.datasets.load_breast_cancer()

print(breast_cancer_dataset)

data_frame=pd.DataFrame(breast_cancer_dataset.data,columns = breast_cancer_dataset.feature_names)

data_frame.head(4)

data_frame['label']=breast_cancer_dataset.target

data_frame.tail(4)

data_frame.shape

data_frame.info()

data_frame.describe()

a=data_frame['area error']
plt.plot(a)

b=data_frame['concave points error']
c=data_frame['mean area']
plt.scatter(b,c)

d=data_frame['mean concavity']
plt.hist(d)

e=data_frame['mean concavity']
plt.bar(e,width=100,height=100)

t=data_frame['mean compactness']
plt.pie(t)

data_frame.isnull().sum()

data_frame['label'].value_counts()

x=data_frame.drop('label',axis=1)

x

y=data_frame['label']
y

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=0)

x_train.shape

x_test.shape

from sklearn.preprocessing import StandardScaler

std=StandardScaler()

train=std.fit_transform(x_train)

train

test=std.transform(x_test)

test

import tensorflow as tf
from tensorflow import keras

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(30,)),
    keras.layers.Dense(20, activation='relu'),
    keras.layers.Dense(2, activation= 'sigmoid')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(x,y,validation_split=0.1
                    , epochs=10)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['training data','validation data'], loc = 'lower right')

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])

plt.title('model_loss')
plt.ylabel('loss')
plt.xlabel('val_loss')

plt.legend(['training data','validation data'], loc = 'upper right')

y_pred = model.predict(x_test)

y_pred1= np.argmax(y_pred, axis=1)

from sklearn.metrics import accuracy_score

accuracy_score(y_pred1,y_test)